"""The root Query type."""
type Query {
  hello: String

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  account(email: String): Account
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Account"""
type Account implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  email: String!
  amountInCents: Int

  """A list of transactions for the current account"""
  transactions(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): TransactionConnection
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge"""
  node: Transaction

  """A cursor for use in pagination"""
  cursor: String!
}

type Transaction implements Node {
  """The ID of an object"""
  id: ID!

  """The idempotence key of the transaction"""
  idempotenceKey: String!
  fromAccount: Account!
  toAccount: Account!
  amountInCents: Int!
  description: String
  createdAt: String!
}

"""The root Mutation type."""
type Mutation {
  """Create a new account"""
  CreateAccount(input: CreateAccountInput!): CreateAccountPayload

  """Get the token to use for authentication"""
  Login(input: LoginInput!): LoginPayload

  """
  Transfer money from the logged in account to another account. Require authentication.
  """
  Transfer(input: TransferInput!): TransferPayload
}

type CreateAccountPayload {
  account: Account
  clientMutationId: String
}

input CreateAccountInput {
  """The name of the user account"""
  name: String!

  """The unique email of the account"""
  email: String!

  """The password of the account"""
  password: String!

  """The password confirmation of the account"""
  passwordConfirmation: String!
  clientMutationId: String
}

type LoginPayload {
  token: String!
  account: Account
  clientMutationId: String
}

input LoginInput {
  """The unique email of the account"""
  email: String!

  """The password of the account"""
  password: String!
  clientMutationId: String
}

type TransferPayload {
  """The logged in account"""
  account: Account

  """The transaction"""
  transaction: Transaction
  clientMutationId: String
}

input TransferInput {
  """The global id of the account to transfer to"""
  toAccountId: String!

  """The amount to transfer in cents"""
  amountInCents: Int!

  """The description of the transfer"""
  description: String

  """The idempotence key"""
  idempotenceKey: String!
  clientMutationId: String
}
